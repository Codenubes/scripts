jenkins:
  securityRealm:
    local:
      allowsSignup: false
      users:
       - id: admin
         password: admin123
  globalNodeProperties:
  - envVars:
      env:
      - key: MAVEN_HOME
        value: /var/jenkins_home/apache-maven-3.8.1/
      - key: M2_HOME
        value: /var/jenkins_home/apache-maven-3.8.1/
tool:
  git:
    installations:
    - home: "git"
      name: "Default"
  maven:
    installations:
    - name: "kodrex_maven"
      home: "/var/jenkins_home/apache-maven-3.5.4/"
      properties:
      - installSource:
          installers:
            - maven:
                id: "3.5.4"
unclassified:
  location:
    url: http://loclhost:8080/
  sonarglobalconfiguration:
    buildWrapperEnabled: true
    installations:
      - name: "kodrex_sonarqube"
        serverUrl: "http://sonarqube:9000"
        serverAuthenticationToken: "0b6b0bff5b2c830eecad612575821820d8aab411"
  githubpluginconfig:
    configs:
      - name: "InHouse GitHub EE"
        apiUrl: "http://loclhost:80/"
        #credentialsId: "[GitHubEEUser]"
        manageHooks: true
  gitscm:
    globalConfigName: jenkins
    globalConfigEmail: jenkins@domain.local
    createAccountBasedOnEmail: true

jobs:
  - script: >
        job('Job-DSL-Hello-World-Job') {
            scm {
                git('git://github.com/oveits/java-maven-junit-helloworld')
            }
            triggers {
                scm('H/15 * * * *')
            }
            steps {
                maven {
                    mavenInstallation('kodrex_maven')
                    goals('clean install')                    
                }
            }
             publishers {
                sonar {
                    mavenInstallation('kodrex_maven')
                    overrideTriggers {
                        skipIfEnvironmentVariable('SKIP_SONAR')
                    }
                }
            }
            
        }
  - script: >
        job('maven-gatling-demo') {
            scm {
                git('https://github.com/gatling/gatling-maven-plugin-demo.git')
            }
            triggers {
                scm('H/15 * * * *')
            }
            steps {
                maven {
                    mavenInstallation('kodrex_maven')
                    goals('clean install gatling:test')                    
                }
            }         
        }        
  - script: >
        job('jenkins-gatling-demo') {
            scm {
                git('https://github.com/gatling/gatling-maven-plugin-demo.git')
            }
            triggers {
                scm('H/15 * * * *')
            }
            steps {
                maven {
                    mavenInstallation('kodrex_maven')
                    goals('clean install')                    
                }
            }         
            publishers {
                archiveGatling()
            }
        }
  - script: >
      multibranchPipelineJob('configuration-as-code') {
          branchSources {
              git {
                  id = 'configuration-as-code'
                  remote('https://github.com/jenkinsci/configuration-as-code-plugin.git')
              }
          }
      }      
  - script: >      
        pipelineJob('job-name') {
          definition {
            cps {
              script('''
                pipeline {
                    agent any

                    tools {
                        // Install the Maven version configured as "M3" and add it to the path.
                        maven "kodrex_maven"
                    }

                    stages {
                        stage('Build') {
                            steps {
                                // Get some code from a GitHub repository
                                git 'https://github.com/jglick/simple-maven-project-with-tests.git'

                                // Run Maven on a Unix agent.
                                sh "mvn -Dmaven.test.failure.ignore=true clean package"

                                // To run Maven on a Windows agent, use
                                // bat "mvn -Dmaven.test.failure.ignore=true clean package"
                            }

                            post {
                                // If Maven was able to run the tests, even if some of the test
                                // failed, record the test results and archive the jar file.
                                success {
                                    junit '**/target/surefire-reports/TEST-*.xml'
                                    archiveArtifacts 'target/*.jar'
                                }
                            }
                        }
                    }
                }
              '''.stripIndent())
              sandbox()     
            }
          }
        }      
  